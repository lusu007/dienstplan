plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

android {
    namespace "io.scelus.dienstplan"
    compileSdk flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        coreLibraryDesugaringEnabled true
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "io.scelus.dienstplan"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        release {
            if (System.getenv()["ANDROID_KEYSTORE_BASE64"]) {
                storeFile file("keystore.jks")
                storePassword System.getenv()["ANDROID_KEYSTORE_PASSWORD"]
                keyAlias System.getenv()["ANDROID_KEY_ALIAS"]
                keyPassword System.getenv()["ANDROID_KEY_PASSWORD"]
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
        }
    }

    flavorDimensions "default"
    productFlavors {
        dev {
            dimension "default"
            applicationIdSuffix ".dev"
            resValue "string", "app_name", "Dienstplan Dev"
        }
        prod {
            dimension "default"
            resValue "string", "app_name", "Dienstplan"
        }
    }

    // Custom APK naming
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def versionName = defaultConfig.versionName
            def versionCode = defaultConfig.versionCode
            def buildType = variant.buildType.name
            def flavorName = variant.flavorName
            
            if (buildType == 'release') {
                outputFileName = "dienstplan-${versionName}-${flavorName}-${versionCode}.apk"
            } else {
                outputFileName = "dienstplan-${versionName}-${flavorName}-${versionCode}-${buildType}.apk"
            }
        }
    }

    // Custom AAB naming
    bundle {
        language {
            enableSplit = false
        }
        density {
            enableSplit = false
        }
        abi {
            enableSplit = true
        }
    }
    
    // Set custom AAB filename
    android.applicationVariants.all { variant ->
        if (variant.buildType.name == 'release') {
            variant.outputs.all { output ->
                if (output.name.contains('Bundle')) {
                    def versionName = defaultConfig.versionName
                    def versionCode = defaultConfig.versionCode
                    def flavorName = variant.flavorName
                    outputFileName = "dienstplan-${versionName}-${flavorName}-${versionCode}.aab"
                }
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.1.5'
}
