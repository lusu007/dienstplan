name: üöÄ Release iOS App

on:
  release:
    types: [published]

jobs:
  build-and-deploy-ios:
    name: üèóÔ∏è Build and Deploy iOS App to App Store
    runs-on: macos-15
    steps:
      - name: üìÇ Checkout code
        uses: actions/checkout@v4
      
      - name: üöÄ Cache pub deps
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: ${{ runner.os }}-pub-

      - name: üîß Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.4'

      - name: üì± Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.4'
          channel: 'stable'
          
      - name: üì¶ Install dependencies
        run: flutter pub get

      - name: üìã Get version from pubspec
        id: version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: //')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: üîß Setup Codemagic CLI
        run: |
          echo "Setting up Codemagic CLI tools..."
          
          # Install using pip with --break-system-packages flag to handle externally managed environment
          pip3 install --break-system-packages codemagic-cli-tools
          
          echo "Verifying installation..."
          app-store-connect --version
          keychain --version
          xcode-project --version
          
          echo "‚úÖ Codemagic CLI tools installation completed successfully"

      - name: üîë Setup iOS Code Signing
        run: |
          echo "Setting up iOS code signing..."
          
          # Create directories for certificates and profiles
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          mkdir -p ~/Library/Developer/Xcode/DerivedData
          
          echo "Decoding and installing distribution certificate..."
          # Decode and install distribution certificate
          echo "${{ secrets.DIS_CERTIFICATE_BASE64 }}" | base64 -d > dist_cert.p12
          
          echo "Creating keychain..."
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-keychain-settings -t 3600 -l ~/Library/Keychains/build.keychain
          
          echo "Importing certificate to keychain..."
          security import dist_cert.p12 -k build.keychain -P "${{ secrets.DIS_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
          
          # List available identities for verification
          echo "Available signing identities:"
          security find-identity -v build.keychain
          
          # Get the exact identity name for signing
          SIGNING_IDENTITY=$(security find-identity -v build.keychain | grep "iPhone Distribution" | head -1 | sed 's/.*"\(.*\)".*/\1/')
          echo "Using signing identity: $SIGNING_IDENTITY"
          
          if [ -z "$SIGNING_IDENTITY" ]; then
            echo "‚ùå No iPhone Distribution certificate found"
            exit 1
          fi
          
          echo "Decoding and installing provisioning profile..."
          # Decode and install provisioning profile
          echo "${{ secrets.PROVISIONING_PROFILE }}" | base64 -d > dist_profile.mobileprovision
          cp dist_profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          
          echo "Verifying installed profiles..."
          # List installed profiles for verification
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
          
          # Verify provisioning profile details
          echo "Provisioning profile details:"
          security cms -D -i dist_profile.mobileprovision | grep -E "(Name|TeamIdentifier|TeamName|AppIDName|UUID)"
          
          echo "Code signing setup completed successfully"

      - name: üì± Build iOS App
        env:
          FLUTTER_BUILD_NUMBER: ${{ github.run_number }}
        run: |
          flutter build ios --release --no-codesign --build-number=${{ github.run_number }}

      - name: üîè Code Sign iOS App
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Find the built app
          APP_PATH=$(find build/ios/iphoneos -name "*.app" -type d | head -1)
          echo "App path: $APP_PATH"
          
          # Find the provisioning profile
          PROFILE_PATH=$(find ~/Library/MobileDevice/Provisioning\ Profiles -name "*.mobileprovision" | head -1)
          echo "Provisioning profile path: $PROFILE_PATH"
          
          # Get the signing identity from the previous step
          SIGNING_IDENTITY=$(security find-identity -v build.keychain | grep "iPhone Distribution" | head -1 | sed 's/.*"\(.*\)".*/\1/')
          echo "Using signing identity: $SIGNING_IDENTITY"
          
          if [ -z "$SIGNING_IDENTITY" ]; then
            echo "‚ùå No iPhone Distribution certificate found"
            exit 1
          fi
          
          # Embed the provisioning profile
          if [ -f "$PROFILE_PATH" ]; then
            echo "Embedding provisioning profile..."
            cp "$PROFILE_PATH" "$APP_PATH/embedded.mobileprovision"
          else
            echo "‚ùå No provisioning profile found"
            exit 1
          fi
          
          # Create resolved entitlements file
          echo "Creating resolved entitlements file..."
          if [ -f "ios/Runner/Runner.entitlements" ]; then
            # Create a temporary entitlements file with resolved variables
            sed "s/\$(AppIdentifierPrefix)/$APPLE_TEAM_ID./g; s/\$(DEVELOPMENT_TEAM)/$APPLE_TEAM_ID/g" ios/Runner/Runner.entitlements > resolved_entitlements.plist
            echo "‚úÖ Entitlements resolved with Team ID: $APPLE_TEAM_ID"
            cat resolved_entitlements.plist
          else
            echo "‚ùå No entitlements file found"
            exit 1
          fi
          
          # Sign all frameworks first
          echo "Signing frameworks..."
          find "$APP_PATH/Frameworks" -name "*.framework" -type d | while read framework; do
            echo "Signing framework: $framework"
            codesign --force --sign "$SIGNING_IDENTITY" --timestamp=none --deep "$framework"
          done
          
          # Sign any dylibs in the app
          echo "Signing dylibs..."
          find "$APP_PATH" -name "*.dylib" | while read dylib; do
            echo "Signing dylib: $dylib"
            codesign --force --sign "$SIGNING_IDENTITY" --timestamp=none "$dylib"
          done
          
          # Sign the main app with resolved entitlements
          echo "Signing main app with resolved entitlements..."
          codesign --force --sign "$SIGNING_IDENTITY" --entitlements resolved_entitlements.plist --timestamp=none "$APP_PATH"
          
          # Verify code signing
          echo "Verifying code signing..."
          codesign -dv --verbose=4 "$APP_PATH"
          
          # Verify provisioning profile is embedded
          if [ -f "$APP_PATH/embedded.mobileprovision" ]; then
            echo "‚úÖ Provisioning profile embedded successfully"
            ls -la "$APP_PATH/embedded.mobileprovision"
          else
            echo "‚ùå Provisioning profile not embedded"
            exit 1
          fi
          
          # Verify the certificate matches the provisioning profile
          echo "Verifying certificate matches provisioning profile..."
          security cms -D -i "$APP_PATH/embedded.mobileprovision" | grep -A 5 "DeveloperCertificates"
          
          # Clean up temporary entitlements file
          rm -f resolved_entitlements.plist

      - name: üì¶ Create IPA
        run: |
          # Create payload directory
          mkdir -p Payload
          
          # Find the built app
          APP_PATH=$(find build/ios/iphoneos -name "*.app" -type d | head -1)
          echo "App path: $APP_PATH"
          
          # Copy app to payload
          cp -R "$APP_PATH" Payload/
          
          # Create IPA
          zip -r "dienstplan-${{ github.event.release.tag_name }}-${{ github.run_number }}.ipa" Payload
          
          # Clean up
          rm -rf Payload

      - name: ‚¨ÜÔ∏è Upload IPA to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: dienstplan-${{ github.event.release.tag_name }}-${{ github.run_number }}.ipa
          asset_name: dienstplan-${{ github.event.release.tag_name }}-${{ github.run_number }}.ipa
          asset_content_type: application/octet-stream

      - name: üè™ Deploy to App Store Connect
        env:
          APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_KEY_IDENTIFIER: ${{ secrets.APPSTORE_CONNECT_KEY_IDENTIFIER }}
          APP_STORE_APP_ID: ${{ secrets.APP_STORE_APP_ID }}
        run: |
          echo "Starting App Store Connect deployment..."
          
          # Verify Codemagic CLI tools are available
          echo "Checking Codemagic CLI tools installation..."
          which app-store-connect
          app-store-connect --version
          
          # App Store Connect API key is available via environment variable
          echo "App Store Connect API key available via environment variable"
          
          # Verify the IPA file exists
          IPA_FILE="dienstplan-${{ github.event.release.tag_name }}-${{ github.run_number }}.ipa"
          if [ -f "$IPA_FILE" ]; then
            echo "‚úÖ IPA file found: $IPA_FILE"
            ls -la "$IPA_FILE"
          else
            echo "‚ùå IPA file not found: $IPA_FILE"
            ls -la *.ipa || echo "No IPA files found"
            exit 1
          fi
          
          echo "Uploading to App Store Connect..."
          
          # Set environment variables for authentication
          export APP_STORE_CONNECT_ISSUER_ID="$APP_STORE_CONNECT_ISSUER_ID"
          export APP_STORE_CONNECT_KEY_IDENTIFIER="$APP_STORE_CONNECT_KEY_IDENTIFIER"
          export APP_STORE_CONNECT_PRIVATE_KEY="$APP_STORE_CONNECT_PRIVATE_KEY"
          
          echo "Environment variables set for authentication"
          
          # Upload to App Store Connect
          app-store-connect publish \
            --path "$IPA_FILE"
          
          echo "‚úÖ App Store Connect deployment completed"

      - name: üßπ Cleanup
        run: |
          # Remove sensitive files
          rm -f dist_cert.p12
          rm -f dist_profile.mobileprovision
          rm -f "dienstplan-${{ github.event.release.tag_name }}-${{ github.run_number }}.ipa"
          rm -f resolved_entitlements.plist
          
          # Remove keychain
          security delete-keychain build.keychain 