// Mocks generated by Mockito 5.4.6 from annotations
// in dienstplan/test/providers/schedule_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dienstplan/models/duty_schedule_config.dart' as _i5;
import 'package:dienstplan/models/schedule.dart' as _i6;
import 'package:dienstplan/services/database_service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i3.DatabaseService {
  MockDatabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Database> get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _i4.Future<_i2.Database>.value(_FakeDatabase_0(
          this,
          Invocation.getter(#database),
        )),
      ) as _i4.Future<_i2.Database>);

  @override
  _i4.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> saveDutyTypes(
    String? configName,
    Map<String, _i5.DutyType>? dutyTypes,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveDutyTypes,
          [
            configName,
            dutyTypes,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i5.DutyType?> loadDutyType(
    String? serviceId,
    String? configName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadDutyType,
          [
            serviceId,
            configName,
          ],
        ),
        returnValue: _i4.Future<_i5.DutyType?>.value(),
      ) as _i4.Future<_i5.DutyType?>);

  @override
  _i4.Future<void> saveSchedules(List<_i6.Schedule>? schedules) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveSchedules,
          [schedules],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i6.Schedule>> loadSchedules() => (super.noSuchMethod(
        Invocation.method(
          #loadSchedules,
          [],
        ),
        returnValue: _i4.Future<List<_i6.Schedule>>.value(<_i6.Schedule>[]),
      ) as _i4.Future<List<_i6.Schedule>>);

  @override
  _i4.Future<void> saveSettings({
    required String? calendarFormat,
    required DateTime? focusedDay,
    required DateTime? selectedDay,
    String? language,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveSettings,
          [],
          {
            #calendarFormat: calendarFormat,
            #focusedDay: focusedDay,
            #selectedDay: selectedDay,
            #language: language,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<Map<String, dynamic>?> loadSettings() => (super.noSuchMethod(
        Invocation.method(
          #loadSettings,
          [],
        ),
        returnValue: _i4.Future<Map<String, dynamic>?>.value(),
      ) as _i4.Future<Map<String, dynamic>?>);

  @override
  _i4.Future<void> clearDatabase() => (super.noSuchMethod(
        Invocation.method(
          #clearDatabase,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> clearDutySchedule(String? configName) => (super.noSuchMethod(
        Invocation.method(
          #clearDutySchedule,
          [configName],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<Map<String, _i5.DutyType>> loadDutyTypes(String? configName) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadDutyTypes,
          [configName],
        ),
        returnValue: _i4.Future<Map<String, _i5.DutyType>>.value(
            <String, _i5.DutyType>{}),
      ) as _i4.Future<Map<String, _i5.DutyType>>);

  @override
  _i4.Future<List<_i6.Schedule>> loadSchedulesForDateRange(
    DateTime? startDate,
    DateTime? endDate, {
    String? configName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadSchedulesForDateRange,
          [
            startDate,
            endDate,
          ],
          {#configName: configName},
        ),
        returnValue: _i4.Future<List<_i6.Schedule>>.value(<_i6.Schedule>[]),
      ) as _i4.Future<List<_i6.Schedule>>);
}
